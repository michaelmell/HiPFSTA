[OpenClParameters]
nrOfTrackingQueues = 1
;computDeviceId:
;0: AMD Pitcairn GPU; 1: Intel Core i5
clPlatform = "nvidia"
#~ clPlatform = "amd"
computeDeviceId = 0

[ImageManipulationParameters]
# image scaling settings
# performImageScaling: either True of False
performImageScaling = False
scalingFactor = 1
# These are the possible options to Image.resize() See here for details: http://effbot.org/imagingbook/image.htm
# The filter argument can be one of NEAREST (use nearest neighbour), BILINEAR (linear interpolation in a 2x2 environment), BICUBIC (cubic spline interpolation in a 4x4 environment), or ANTIALIAS (a high-quality downsampling filter). If omitted, or if the image has mode “1” or “P”, it is set to NEAREST.
scalingMethod = "BICUBIC"

[ImageFilterParameters]
# filter settings
performImageFiltering = True
# assumed quadratic
filterType = "wiener"
filterKernelSize = [3,3]
noisePowerEstimate = None
#~ noisePowerEstimate = "estimateFromSnrRoi"

[TrackingParameters]
resetNormalsAfterEachImage = False
#~ resetNormalsAfterEachImage = True
startingCoordinate = [126,43]
rotationCenterCoordinate = [126,119]
membraneNormalVector = [0,-1]
nrOfAnglesToCompare = 100
linFitParameter = 5
#~ linFitParameter = 2.5
#~ linFitSearchRange = 20.0
linFitSearchRange = 10.0
interpolationFactor = 20
meanParameter = 20
meanRangePositionOffset = 20
;localAngleRange = np.pi/8
#~ localAngleRange = 0.39269908169872414
;localAngleRange = np.pi/4
localAngleRange = 0.7853981633974483
nrOfLocalAngleSteps = 64
;nrOfMembraneContourPoints = nrOfStrides * detectionKernelStrideSize
#~ detectionKernelStrideSize = 64
#~ nrOfStrides = 32
detectionKernelStrideSize = 2048
#~ detectionKernelStrideSize = 4096
nrOfStrides = 1
nrOfIterationsPerContour = 1
#~ coordinateTolerance = 0.001
coordinateTolerance = 0.001
#~ coordinateTolerance = 0.001

minNrOfTrackingIterations = 5
maxNrOfTrackingIterations = 20
;imageIndexToContinueFrom: this needs to be a correctly tracked contour; tracking will continue with contour after this one
#~ imageIndexToContinueFrom = 0
imageIndexToContinueFrom = 0

#~ stepsBetweenSavingResults = 5000
#~ stepsBetweenSavingResults = 200
stepsBetweenSavingResults = 10

# inclineTolerance: minimimum allowed incline is inclineTolerance*maxFitIncline; 'maxFitIncline' is determined from all 'fitIncline' in the current workgroup
inclineTolerance = 0.7

#~ intensityRoiTopLeft = [0,0]
#~ intensityRoiBottomRight = [50,50]

centerTolerance = 0.001

# this is the maximum angle (unit: [radians]) allowed between two ajacent vector connecting membrane coordinates
# coordinates with adjacent angles larger than this will be discarded
# good value for RBCs: pi/2 = 1.57079
maxInterCoordinateAngle = 1.57079
# this is the maximum shift of a coordinate (unit: [pixels]) allowed between two consecutive iterations of the tracking algorithm
# if a coordinte shifts its position more than 'maxCoordinateShift' between two trackings it will be discarded
# good value for RBCs: 0.3 #2
#~ maxCoordinateShift = 2
maxCoordinateShift = 10


[FileParameters]
;backgroundImagePath = "rbc_images/background_1_1_C001H001S0001000001.tif"
;imagePath = "rbc_images/movie/movie_1_0degrees_C001H001S0001000001.tif"
darkfieldDirectoryPath = "/media/data_volume/non-mirrored_files/work/phd_thesis/flicker_spectroscopy_data/dark_fields/2013-11-26/2000fps/256x256/movie_1_C001H001S0001"
#~ darkfieldDirectoryPath = None
backgroundDirectoryPath = "/media/data_volume/non-mirrored_files/work/phd_thesis/flicker_spectroscopy_data/rbc/dried/2013-09-30/rbc_2/2000fps/background_1_1_C001H001S0001"
imageDirectoryPath = "/media/data_volume/non-mirrored_files/work/phd_thesis/flicker_spectroscopy_data/rbc/dried/2013-09-30/rbc_2/2000fps/movie_1_C001H001S0001"
imageFileExtension = "tif"
ignoredimageindices = None
dataAnalysisDirectoryPath = "/media/data_volume/mirrored_files/work/phd_thesis/matlab_functions/own/flicker_spectroscopy/image_interpolation/opencl_interpolation_testing/tracking_algorithm/dev_006/dev_SNAPSHOT_2014-03-07/example_run_config/tracking_1"

# saves the fitIncline values of the first [nrOfFramesToSaveFitInclinesFor] frames
nrOfFramesToSaveFitInclinesFor = 1000
# region from where the SNR will be determined; format: [[x1,y1],[x2,y2]]
snrRoi = [[0,0],[40,40]]
#~ snrRoi = None
