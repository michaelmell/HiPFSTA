Nr of iterations: 1
> /media/data_volume/mirrored_files/work/phd_thesis/matlab_functions/own/flicker_spectroscopy/image_interpolation/opencl_interpolation_testing/tracking_algorithm/dev_002/dev/contourTrackerClass.py(339)trackContour()
    338                 #~ self.host_trackingFinished = np.int32(0) # True

--> 339                 self.trackingFinished = np.array(1,dtype=np.int32) # True
    340                 self.dev_trackingFinished = cl_array.to_device(self.ctx, self.queue, self.trackingFinished)

ipdb> np.any(np.isnan(self.host_membranePolarRadius)),np.any(np.isnan(self.host_membranePolarTheta)),np.any(np.isnan(self.host_interpolatedMembranePolarRadius)),np.any(np.isnan(self.host_interpolationAngles)),np.any(np.isnan(self.host_membraneCoordinatesX)),np.any(np.isnan(self.host_membraneCoordinatesY)),np.any(np.isnan(self.host_interpolatedMembraneCoordinatesX)),np.any(np.isnan(self.host_interpolatedMembraneCoordinatesY)),np.any(np.isnan(self.host_previousInterpolatedMembraneCoordinatesX)),np.any(np.isnan(self.host_previousInterpolatedMembraneCoordinatesY)),np.any(np.isnan(self.host_membraneNormalVectorsX)),np.any(np.isnan(self.host_membraneNormalVectorsY))
(False, False, False, False, False, False, False, False, False, False, False, False)
ipdb> c
> /media/data_volume/mirrored_files/work/phd_thesis/matlab_functions/own/flicker_spectroscopy/image_interpolation/opencl_interpolation_testing/tracking_algorithm/dev_002/dev/contourTrackerClass.py(385)trackContour()
    384 
--> 385                 for strideNr in xrange(self.nrOfStrides):
    386 

ipdb> np.any(np.isnan(self.host_membranePolarRadius)),np.any(np.isnan(self.host_membranePolarTheta)),np.any(np.isnan(self.host_interpolatedMembranePolarRadius)),np.any(np.isnan(self.host_interpolationAngles)),np.any(np.isnan(self.host_membraneCoordinatesX)),np.any(np.isnan(self.host_membraneCoordinatesY)),np.any(np.isnan(self.host_interpolatedMembraneCoordinatesX)),np.any(np.isnan(self.host_interpolatedMembraneCoordinatesY)),np.any(np.isnan(self.host_previousInterpolatedMembraneCoordinatesX)),np.any(np.isnan(self.host_previousInterpolatedMembraneCoordinatesY)),np.any(np.isnan(self.host_membraneNormalVectorsX)),np.any(np.isnan(self.host_membraneNormalVectorsY))
(False, False, False, False, True, True, False, False, False, False, True, True)
ipdb> 

