[OpenClParameters]
;computDeviceId:
;0: AMD Pitcairn GPU; 1: Intel Core i5
#~ clPlatform = "nvidia"
#~ clPlatform = "amd"
clPlatform = "intel"
computeDeviceId = 0

[ImageManipulationParameters]
# image scaling settings
# performImageScaling: either True of False
performImageScaling = False
scalingFactor = 1
# These are the possible options to Image.resize() See here for details: http://effbot.org/imagingbook/image.htm
# The filter argument can be one of NEAREST (use nearest neighbour), BILINEAR (linear interpolation in a 2x2 environment), BICUBIC (cubic spline interpolation in a 4x4 environment), or ANTIALIAS (a high-quality downsampling filter). If omitted, or if the image has mode “1” or “P”, it is set to NEAREST.
scalingMethod = "BICUBIC"

[ImageFilterParameters]
# filter settings
performImageFiltering = True
# assumed quadratic
filterType = "wiener"
filterKernelSize = [3,3]
# the estimate given, should be the *variance = std^2* of image intensity; when 'None' it will be estimated from the whole image; "estimateFromSnrRoi"; when "estimateFromSnrRoi" it will be estimated from the area given by the TrackingParameter "snrRoi"
#~ noisePowerEstimate = None
noisePowerEstimate = "estimateFromSnrRoi"

[TrackingParameters]
positioningMethod = "meanIntensityIntercept"
#~ resetNormalsAfterEachImage = False
resetNormalsAfterEachImage = True
startingCoordinate = [128,41]
rotationCenterCoordinate = [128,124]
membraneNormalVector = [0,-1]
nrOfAnglesToCompare = 100
linFitParameter = 5
#~ linFitParameter = 2.5
#~ linFitSearchRange = 20.0
linFitSearchRange = 10.0
interpolationFactor = 20
meanParameter = 20
meanRangePositionOffset = 20
;localAngleRange = np.pi/8
#~ localAngleRange = 0.39269908169872414
;localAngleRange = np.pi/4
localAngleRange = 0.7853981633974483
nrOfLocalAngleSteps = 64
;nrOfMembraneContourPoints = nrOfStrides * detectionKernelStrideSize
#~ detectionKernelStrideSize = 64
#~ nrOfStrides = 32
detectionKernelStrideSize = 2048
#~ detectionKernelStrideSize = 4096
nrOfStrides = 1
nrOfIterationsPerContour = 1
#~ coordinateTolerance = 0.002
coordinateTolerance = 0.01
#~ coordinateTolerance = 0.002

minNrOfTrackingIterations = 1
maxNrOfTrackingIterations = 5
;imageIndexToContinueFrom: this needs to be a correctly tracked contour; tracking will continue with contour after this one
imageIndexToContinueFrom = 5

stepsBetweenSavingResults = 20000
#~ stepsBetweenSavingResults = 200
#~ stepsBetweenSavingResults = 10

# inclineTolerance: minimimum allowed incline is inclineTolerance*maxFitIncline; 'maxFitIncline' is determined from all 'fitIncline' in the current workgroup
inclineTolerance = 0.7

#~ intensityRoiTopLeft = [0,0]
#~ intensityRoiBottomRight = [50,50]

centerTolerance = 0.01

# this is the maximum angle (unit: [radians]) allowed between two ajacent vector connecting membrane coordinates
# coordinates with adjacent angles larger than this will be discarded
# good value for RBCs: pi/2 = 1.57079
maxInterCoordinateAngle = 1.57079
# this is the maximum shift of a coordinate (unit: [pixels]) allowed between two consecutive iterations of the tracking algorithm
# if a coordinte shifts its position more than 'maxCoordinateShift' between two trackings it will be discarded
# good value for RBCs: 0.3 #2
#~ maxCoordinateShift = 2
maxCoordinateShift = 10

# region from where the SNR and average image intensity will be determined; format: [[x1,y1],[x2,y2]]
snrRoi = [[1,1],[55,55]]
#~ snrRoi = [[200,200],[255,255]]
#~ snrRoi = None

[FileParameters]
;backgroundImagePath = "rbc_images/background_1_1_C001H001S0001000001.tif"
;imagePath = "rbc_images/movie/movie_1_0degrees_C001H001S0001000001.tif"
darkfieldDirectoryPath = "C:/Private/PhD_Publications/Publication_of_Algorithm/Code/TrackingAlgorithm/TrackingAlgorithm/TestData/Input/dark_fields"
#~ darkfieldDirectoryPath = None
backgroundDirectoryPath = "C:/Private/PhD_Publications/Publication_of_Algorithm/Code/TrackingAlgorithm/TrackingAlgorithm/TestData/Input/backgrounds"
#~ backgroundDirectoryPath = None
imageDirectoryPath = "C:/Private/PhD_Publications/Publication_of_Algorithm/Code/TrackingAlgorithm/TrackingAlgorithm/TestData/Input/flickering_movie"
imageFileExtension = "tif"
ignoredimageindices = None
dataAnalysisDirectoryPath = "C:/Private/PhD_Publications/Publication_of_Algorithm/Code/TrackingAlgorithm/TrackingAlgorithm/TestData/Output/CompleteProgramRun_Tracking_Continuation_000"

# saves the fitIncline values of the first [nrOfFramesToSaveFitInclinesFor] frames
nrOfFramesToSaveFitInclinesFor = 10000
